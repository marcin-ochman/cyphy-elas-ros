#!/usr/bin/env python

PACKAGE = "elas_ros"
import roslib;

from dynamic_reconfigure.parameter_generator_catkin import *

generator = ParameterGenerator()


parameters = [
    {
        "name": "disp_min",
        "type": double_t,
        "description": "Minimum disparity",
        "minimum": 0,
        "maximum": 255,
        "default": 0,
    },
    {
        "name": "disp_max",
        "type": double_t,
        "description": "Maximum disparity",
        "minimum": 0,
        "maximum": 255,
        "default": 255,
    },
    {
        "name": "support_threshold",
        "type": double_t,
        "description": "Maximum uniqueness ratio (best vs. second best support match)",
        "minimum": 0,
        "maximum": 1,
        "default": 0.85,
    },
    {
        "name": "support_texture",
        "type": int_t,
        "description": "Minimum texture for support points",
        "minimum": 0,
        "maximum": 100,
        "default": 10,
    },
    {
        "name": "candidate_stepsize",
        "type": int_t,
        "description": "Step size of regular grid on which support points are matched",
        "minimum": 1,
        "maximum": 100,
        "default": 5,
    },
    {
        "name": "incon_window_size",
        "type": int_t,
        "description": "Window size of inconsistent support point check",
        "minimum": 3,
        "maximum": 31,
        "default": 5,
    },
    {
        "name": "incon_threshold",
        "type": int_t,
        "description": "Disparity similarity threshold for support point to be considered consistent",
        "minimum": 1,
        "maximum": 15,
        "default": 5,
    },
    {
        "name": "incon_min_support",
        "type": double_t,
        "description": "Minimum number of consistent support points",
        "minimum": 1,
        "maximum": 15,
        "default": 5,
    },
    {
        "name": "add_corners",
        "type": bool_t,
        "description": "Add support points at image corners with nearest neighbor disparities",
        "default": True,
    },
    {
        "name": "grid_size",
        "type": int_t,
        "description": "Size of neighborhood for additional support point extrapolation",
        "minimum": 5,
        "maximum": 50,
        "default": 20,
    },
    {
        "name": "beta",
        "type": double_t,
        "description": "Image likelihood parameter",
        "minimum": 1e-3,
        "maximum": 0.1,
        "default": 0.02,
    },
    {
        "name": "gamma",
        "type": double_t,
        "description": "Prior constant",
        "minimum": 1,
        "maximum": 10,
        "default": 3,
    },
    {
        "name": "sigma",
        "type": double_t,
        "description": "Prior sigma",
        "minimum": 1,
        "maximum": 10,
        "default": 1,
    },
    {
        "name": "sradius",
        "type": double_t,
        "description": "Prior sigma radius",
        "minimum": 1,
        "maximum": 10,
        "default": 2,
    },
    {
        "name": "match_texture",
        "type": double_t,
        "description": "Minimum texture for dense matching",
        "minimum": 0,
        "maximum": 5,
        "default": 1,
    },
    {
        "name": "lr_threshold",
        "type": double_t,
        "description": "Disparity threshold for left/right consistency check",
        "minimum": 1,
        "maximum": 10,
        "default": 2,
    },
    {
        "name": "speckle_sim_threshold",
        "type": double_t,
        "description": "Similarity threshold for speckle segmentation",
        "minimum": 1,
        "maximum": 10,
        "default": 1,
    },
    {
        "name": "speckle_size",
        "type": double_t,
        "description": "Maximal size of a speckle (small speckles get removed)",
        "minimum": 100,
        "maximum": 400,
        "default": 200,
    },
    {
        "name": "ipol_gap_width",
        "type": int_t,
        "description": "Interpolate small gaps (left<->right, top<->bottom)",
        "minimum": 1,
        "maximum": 200,
        "default": 3,
    },
    {
        "name": "filter_median",
        "type": bool_t,
        "description": "Optional median filter (approximated)",
        "default": False,
    },
    {
        "name": "filter_adaptive_mean",
        "type": bool_t,
        "description": "Optional adaptive mean filter (approximated)",
        "default": True,
    },
    {
        "name": "postprocess_only_left",
        "type": bool_t,
        "description": "Saves time by not postprocessing the right image",
        "default": True,
    },
    {
        "name": "subsampling",
        "type": bool_t,
        "description": "Saves time by only computing disparities for each 2nd pixel",
        "default": True,
    },
]

gen = ParameterGenerator()

for idx, param in enumerate(parameters):
    if param["type"] in [double_t, int_t]:
        gen.add(param["name"], param["type"], 2**idx, param["description"],
                param["default"], param["minimum"], param["maximum"])

    if  param["type"] == bool_t:
        gen.add(param["name"], param["type"], 2**idx, param["description"],
                param["default"])

exit(gen.generate(PACKAGE, PACKAGE, "ElasParameters"))
